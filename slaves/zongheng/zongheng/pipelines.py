# -*- coding: utf-8 -*-# Define your item pipelines here## Don't forget to add your pipeline to the ITEM_PIPELINES setting# See: http://doc.scrapy.org/en/latest/topics/item-pipeline.htmlimport loggingimport MySQLdbfrom zongheng.items import BookItem,CommentItemimport sysreload(sys)sys.setdefaultencoding('utf-8')class ZonghengBookPipeline(object):    def __init__(self, mysql_uri, mysql_db, mysql_user, mysql_password, mysql_port, mysql_charset):        self.mysql_uri = mysql_uri        self.mysql_db = mysql_db        self.mysql_user = mysql_user        self.mysql_password = mysql_password        self.mysql_port = mysql_port        self.mysql_charset = mysql_charset    @classmethod    def from_crawler(cls, crawler):        return cls(            mysql_uri=crawler.settings.get('MYSQL_URI'),            mysql_db=crawler.settings.get('MYSQL_DATABASE'),            mysql_user=crawler.settings.get('MYSQL_USER'),            mysql_password=crawler.settings.get('MYSQL_PASSWORD'),            mysql_port=crawler.settings.get('MYSQL_PORT'),            mysql_charset=crawler.settings.get('MYSQL_CHARSET')        )    def open_spider(self, spider):        self.conn = MySQLdb.connect(host=self.mysql_uri, port=self.mysql_port, user=self.mysql_user, passwd=self.mysql_password, db=self.mysql_db, charset=self.mysql_charset)        self.cur = self.conn.cursor()    def close_spider(self, spider):        self.cur.close()        self.conn.close()    def process_item(self, item, spider):        if isinstance(item,BookItem):            # VALUES (			# p_create,p_update,p_name,p_url,TRIM(p_infoid),			# p_plat,p_class,p_author,p_tag,p_label,p_wordsCount,p_detail)            # 插入book数据            sql = "INSERT INTO fiction_info (vc_name, vc_url, vc_infoid, vc_plat, vc_class, vc_author, vc_tags, vc_label, nm_wordsCount, vc_detail) VALUES ('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%d', '%s')"            data = (item.get('dt_create'), item.get('dt_update'), item.get('bname'), item.get('vc_url'), item.get('bid'), "纵横中文网", item.get('categoryType'),                    item.get('author'), item.get('vc_tags'), item.get('vc_label'), item.get('stringNumber'),                    item.get('bookIntro'))            # self.cur.execute(sql % data)            try:                self.cur.callproc('pro_add_fuction_info', data)                self.conn.commit()                print 'fuction_info insert ', self.cur.rowcount, 'data successfully'                # return item            except Exception, r:                logging.error(msg="{}:{},{}".format(Exception, r, 'pro_add_fuction_info'))            # print item.get('genderType')            # print type(item.get('genderType'))            if item.get('genderType') == '男生站':                print item.get('genderType')                # VALUES (			# p_create,p_update,p_name,p_url,TRIM(p_infoid),p_clickCount,			# p_monthClick,p_vipWeekClickCount,p_totalRecom,p_monthRecom,			# p_weekRecom,p_collect,p_commentCount,p_score,p_scorePerson)            #     sql = "INSERT INTO fuction_data (vc_name, vc_url, vc_infoid, nm_clickCount, nm_monthClick, nm_totalRecom, nm_monthRecom, nm_collect, nm_commentCount) VALUES ('%s', '%s', '%s', '%s', '%d', '%d', '%d', '%d', '%d', '%d')"                data = (item.get('dt_create'), item.get('dt_update'), item.get('bname'), item.get('vc_url'), item.get('bid'), item.get('totalTouch'),                        item.get('monthTouch'), 0, item.get('totalRecommend'), item.get('monthRecommend'), 0, item.get('totalCollection'),                        item.get('discussCount'), 0, 0)                try:                    self.cur.callproc('pro_add_fuction_data', data)                    self.conn.commit()                    print 'fuction_data insert ', self.cur.rowcount, 'data successfully(boy)'                    return item                except Exception, r:                    logging.error(msg="{}:{},{}".format(Exception, r, 'pro_add_fuction_data'))            else:            #     sql = "INSERT INTO fuction_data (vc_name, vc_url, vc_infoid, nm_clickCount, nm_commentCount) VALUES ('%s', '%s', '%s', '%s', '%d', '%d')"            #     data = (item.get('bname'), item.get('vc_url'), item.get('bid'), item.get('totalTouch'), item.get('discussCount'))            #     self.cur.execute(sql % data)                data = (item.get('dt_create'), item.get('dt_update'), item.get('bname'), item.get('vc_url'), item.get('bid'), item.get('totalTouch'),                        0, 0, 0, 0, 0, 0,                        item.get('discussCount'), 0, 0)                try:                    self.cur.callproc('pro_add_fuction_data', data)                    self.conn.commit()                    print 'fuction_data insert ', self.cur.rowcount, 'data successfully(girl)'                    return item                except Exception, r:                    logging.error(msg="{}:{},{}".format(Exception, r, 'pro_add_fuction_data'))        if isinstance(item,CommentItem):            # VALUES (			# p_create,p_update,p_name,p_url,p_infoid,p_userName,			# p_userImg,p_userId,p_publish,p_click,p_up,p_reply,p_content)            # 插入book数据            # sql = "INSERT INTO fuction_comment (vc_name, vc_url, vc_infoid, vc_userName, vc_userImg, vc_userId, vc_publish, nm_click, nm_up, nm_reply, vc_content) VALUES ('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%d', '%d', '%d', '%s')"            data = (item.get('dt_create'), item.get('dt_update'), item.get('vc_name'), item.get('vc_url'), item.get('vc_infoid'), item.get('vc_userName'), item.get('vc_userImg'),                    item.get('vc_userId'), item.get('vc_public'), item.get('nm_click'), item.get('nm_up'),                    item.get('nm_reply'), item.get('vc_content'))            # self.cur.execute(sql % data)            # self.conn.commit()            try:                self.cur.callproc('pro_add_fuction_comment', data)                self.conn.commit()                print 'fuction_comment insert ', self.cur.rowcount, 'data successfully'                return item            except Exception, r:                logging.error(msg="{}:{},{}".format(Exception, r, 'pro_add_fuction_comment'))